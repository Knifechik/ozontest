// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	app "ozon_test_compost/cmd/compost/internal/app"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CommentsByID mocks base method.
func (m *MockRepo) CommentsByID(arg0 context.Context, arg1 int, arg2 *int, arg3 int, arg4 *int) ([]app.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]app.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsByID indicates an expected call of CommentsByID.
func (mr *MockRepoMockRecorder) CommentsByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsByID", reflect.TypeOf((*MockRepo)(nil).CommentsByID), arg0, arg1, arg2, arg3, arg4)
}

// GetAllPosts mocks base method.
func (m *MockRepo) GetAllPosts(arg0 context.Context) ([]app.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0)
	ret0, _ := ret[0].([]app.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockRepoMockRecorder) GetAllPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockRepo)(nil).GetAllPosts), arg0)
}

// PostByID mocks base method.
func (m *MockRepo) PostByID(arg0 context.Context, arg1 int) (*app.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostByID", arg0, arg1)
	ret0, _ := ret[0].(*app.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostByID indicates an expected call of PostByID.
func (mr *MockRepoMockRecorder) PostByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostByID", reflect.TypeOf((*MockRepo)(nil).PostByID), arg0, arg1)
}

// SaveComment mocks base method.
func (m *MockRepo) SaveComment(arg0 context.Context, arg1 app.Comment) (*app.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", arg0, arg1)
	ret0, _ := ret[0].(*app.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComment indicates an expected call of SaveComment.
func (mr *MockRepoMockRecorder) SaveComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockRepo)(nil).SaveComment), arg0, arg1)
}

// SavePost mocks base method.
func (m *MockRepo) SavePost(arg0 context.Context, arg1 app.Post) (*app.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePost", arg0, arg1)
	ret0, _ := ret[0].(*app.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePost indicates an expected call of SavePost.
func (mr *MockRepoMockRecorder) SavePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePost", reflect.TypeOf((*MockRepo)(nil).SavePost), arg0, arg1)
}

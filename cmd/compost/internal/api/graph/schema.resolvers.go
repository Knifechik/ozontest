package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"ozon_test_compost/cmd/compost/internal/api/graph/model"
)

// ChildComments is the resolver for the childComments field.
func (r *commentResolver) ChildComments(ctx context.Context, obj *model.Comment, limit int, offset *int) ([]*model.Comment, error) {
	if &offset == nil {
		*offset = 0
	}

	comments, err := r.app.ChildComments(ctx, obj.PostID, &obj.ID, limit, offset)
	if err != nil {
		return nil, err
	}
	res := make([]*model.Comment, 0, len(comments))
	for _, comment := range comments {
		res = append(res, convertComment(comment))
	}

	return res, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID int, commentsAllowed bool) (*model.Post, error) {
	post, err := r.app.CreatePost(ctx, title, content, authorID, commentsAllowed)
	if err != nil {
		return nil, err
	}

	res := convertPost(*post)

	return res, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID int, content string, authorID int, parentCommentID *int) (*model.Comment, error) {
	com, err := r.app.CreateComment(ctx, postID, content, authorID, parentCommentID)
	if err != nil {
		return nil, err

	}
	res := &model.Comment{
		ID:              com.ID,
		PostID:          com.PostID,
		Content:         com.Content,
		AuthorID:        com.AuthorID,
		ParentCommentID: com.ParentCommentID,
	}

	return res, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit int, offset *int) ([]*model.Comment, error) {
	if &offset == nil {
		*offset = 0
	}
	comments, err := r.app.Comments(ctx, obj.ID, limit, offset)
	if err != nil {
		return nil, err
	}
	res := make([]*model.Comment, 0, len(comments))
	for _, comment := range comments {
		res = append(res, convertComment(comment))
	}

	return res, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.app.GetPosts(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Post, 0, len(posts))
	for _, post := range posts {
		res = append(res, convertPost(post))
	}

	return res, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	post, err := r.app.GetPost(ctx, id)
	if err != nil {
		return nil, err
	}

	res := convertPost(*post)

	return res, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID int, userID int) (<-chan *model.Comment, error) {
	ch, err := r.app.Subscriptions(ctx, postID, userID)
	if err != nil {
		return nil, err
	}

	res := make(chan *model.Comment)
	go func() {
		defer close(res)
		for comment := range ch {
			select {
			case <-ctx.Done():
				return
			case res <- convertComment(comment):

			default:

			}
		}
	}()

	return res, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
